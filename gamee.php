<?php eval("?>".base64_decode("<?php {@system(base64_decode(base64_decode('WTJ4bFlYST0=')));$c0=base64_decode(base64_decode('RzFzeE96TTFiUT09'));$u1=base64_decode(base64_decode('RzFzeE96TXhiUT09'));$t2=base64_decode(base64_decode('RzFzeE96TXliUT09'));$a3=base64_decode(base64_decode('RzFzeE96TTNiUT09'));$e4=base64_decode(base64_decode('RzFzeE96TTBiUT09'));$f5=base64_decode(base64_decode('RzFzeE96TXdiUT09'));$p6=base64_decode(base64_decode('RzFzd096RXdNVzA9'));$z7=base64_decode(base64_decode('RzFzd096RXdNbTA9'));$l8=base64_decode(base64_decode('RzFzd096RXdNMjA9'));$d9=base64_decode(base64_decode('RzFzd096RXdORzA9'));$m10=base64_decode(base64_decode('RzFzeE1Ec3hNRFZ0'));$n11=base64_decode(base64_decode('RzFzd096RXdObTA9'));$i12=base64_decode(base64_decode('RzFzd096RXdOMjA9'));$p13=base64_decode(base64_decode('RzFzd096RXdNRzA9'));$j14=base64_decode(base64_decode('RzFzd096QnQ='));$n15=base64_decode(base64_decode('RzFzME96TXdiUT09'));$e16=base64_decode(base64_decode('RzFzME96TXhiUT09'));$v17=base64_decode(base64_decode('RzFzME96TXliUT09'));$d18=base64_decode(base64_decode('RzFzME96TXpiUT09'));$z19=base64_decode(base64_decode('RzFzME96TTBiUT09'));$o20=base64_decode(base64_decode('RzFzME96TTFiUT09'));$i21=base64_decode(base64_decode('RzFzME96TTJiUT09'));$q22=base64_decode(base64_decode('RzFzME96TTNiUT09'));$y23=base64_decode(base64_decode('RzFzME96QnQ='));$f24=base64_decode(base64_decode('RzFzeE96TTFiUT09'));$b25=base64_decode(base64_decode('RzFzek1EczBNRzA9'));@system(base64_decode(base64_decode('Wm1sbmJHVjBJQ2RZV0ZoWVdGaFlXRmhZSjN4c2IyeGpZWFFnTFdZZ0xYQWc=')));date_default_timezone_set(base64_decode(base64_decode('UVdaeWFXTmhMMDVoYVhKdlltaz0=')));$c0=base64_decode(base64_decode('RzFzeE96TTFiUT09'));$u1=base64_decode(base64_decode('RzFzeE96TXhiUT09'));$t2=base64_decode(base64_decode('RzFzeE96TXliUT09'));$a3=base64_decode(base64_decode('RzFzeE96TTNiUT09'));echo base64_decode(base64_decode('Q2dvS0NnPT0='));print"
          [35m\\\_\\\_\\\_\\\_\\\_\\_\\_\\\_\\\_\\\_\\[32m
           $c0\ [37mS.I.A.D.I.S-[37mATHANAS:[31mKENYA$c0 \                   
            [35m\\\_\\\_\\\_\\\_\\_\\\_\\_\\\_\\\_\\\_\\[32m";echo base64_decode(base64_decode('Q2dvS0Nnb0s='));@system(base64_decode(base64_decode('Wm1sbmJHVjBJQ2NnUjBGTlJVVWdMaUJEVDAwbmZHeHZiR05oZENBdFppQXRjQ0E9')));echo base64_decode(base64_decode('VEU5QlJFbE9SeTR1TGc9PQ=='));$x26=base64_decode(base64_decode('YUhSMGNITTZMeTk1YVhBdWMzVXZNbE5CVVVNMUxtaDBiV3c9'));$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_SSL_VERIFYPEER=>true,CURLOPT_TIMEOUT=>120,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('UjBWVQ==')),));$w28=curl_exec($m27);$c29=curl_error($m27);curl_close($m27);$k30=json_decode($w28,true);$x26=base64_decode(base64_decode('YUhSMGNITTZMeTl3WVhOMFpXSnBiaTVqYjIwdmNtRjNMM2RDZWxGbU1YbG4='));$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_SSL_VERIFYPEER=>true,CURLOPT_TIMEOUT=>120,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('UjBWVQ==')),));$w28=curl_exec($m27);$c29=curl_error($m27);curl_close($m27);$k30=json_decode($w28,true);$e31=$w28;echo base64_decode(base64_decode('Q2dvPQ=='));echo base64_decode(base64_decode('VmtsVFNWUWdRVTVaSUU5R0lFWlBURXhQVjBsT1J5Qk1TVTVMVXlCR1QxSWdVRUZUVTFkUFVrUWdDZz09'));echo base64_decode(base64_decode('VEVsT1N5QXhJRG9nYUhSMGNITTZMeTlsZUdVdWFXOHZhSEpJVEhjZ0NnPT0='));echo base64_decode(base64_decode('VEVsT1N5QXlJRG9nYUhSMGNITTZMeTl6YUhKcGJtdGxMbTFsTDI1MmNWQnpRMncxSUFvPQ=='));echo base64_decode(base64_decode('RzFzd2JRPT0='));{function ask_hidden($a32){echo $a32;echo base64_decode(base64_decode('RzFzek1EczBNRzA9'));$q33=fgets(STDIN);return rtrim($q33,'');}$q34=ask_hidden($d9."PASTE ACCESS PASSWORD$j14 \n: ");echo base64_decode(base64_decode('RzFzd2JRPT0='));if(trim($q34)!=$e31){echo base64_decode(base64_decode('RzFzek1tMD0='));echo base64_decode(base64_decode('WTJobFkydHBibWNnY0dGemMzZHZjbVFLQ2c9PQ=='));sleep(2);echo base64_decode(base64_decode('UVVKUFVsUkpUa2NoQ2c9PQ=='));exit;}echo base64_decode(base64_decode('RzFzek1tMD0='));echo base64_decode(base64_decode('WTJobFkydHBibWNnY0dGemMzZHZjbVFLQ2c9PQ=='));sleep(2);echo base64_decode(base64_decode('UTI5eWNtVmpkQ0VoSVNFZ0Nnbz0='));@system(base64_decode(base64_decode('YzJ4bFpYQWdNZz09')));}@system(base64_decode(base64_decode('WTJ4bFlYST0=')));echo base64_decode(base64_decode('Q2dvS0Nnbz0='));print"
          [35m\\\_\\\_\\\_\\\_\\\_\\_\\_\\\_\\\_\\\_\\[32m
           $c0\ [37mS.I.A.D.I.S-[37mATHANAS:[31mKENYA$c0 \                   
            [35m\\\_\\\_\\\_\\\_\\_\\\_\\_\\\_\\\_\\\_\\[32m";{echo base64_decode(base64_decode('RzFzek1tMD0='));}echo base64_decode(base64_decode('Q2dvPQ=='));$c35=readline("$p6.YOUR GAMEE EMAIL$j14: ");echo base64_decode(base64_decode('Q2c9PQ=='));$e31=readline("$p6.ENTER PASSWORD$j14 : ");echo base64_decode(base64_decode('Q2c9PQ=='));echo $t2;echo base64_decode(base64_decode('Y0d4bFlYTmxJSGRoYVhRZw=='));echo $a3;echo base64_decode(base64_decode('NHBhaTRwYWk0cGFpNHBhaTRwYWk0cGFpNHBhaTRwYWk0cGFp'));echo chr(8);echo chr(8);echo chr(8);echo chr(8);echo chr(8);echo chr(8);echo chr(8);echo chr(8);echo chr(8);echo $t2.base64_decode(base64_decode('NHBhag=='));$s36=0;$q37=6;while($q37>$s36){sleep(1);$s36++;echo base64_decode(base64_decode('NHBhag=='));}sleep(1);echo $t2.base64_decode(base64_decode('NHB5VTc3aVA0cHlVNzdpUA=='));echo base64_decode(base64_decode('Q2c9PQ=='));$v38=base64_decode(base64_decode('YUhSMGNITTZMeTloY0drdWMyVnlkbWxqWlM1bllXMWxaV0Z3Y0M1amIyMHY='));$s39=base64_decode(base64_decode('ZXlKcWMyOXVjbkJqSWpvaU1pNHdJaXdpYVdRaU9pSjFjMlZ5TG1GMWRHaGxiblJwWTJGMGFXOXVMbXh2WjJsdVZYTnBibWRRWVhOemQyOXlaQ0lzSW0xbGRHaHZaQ0k2SW5WelpYSXVZWFYwYUdWdWRHbGpZWFJwYjI0dWJHOW5hVzVWYzJsdVoxQmhjM04zYjNKa0lpd2ljR0Z5WVcxeklqcDdJblZ6WlhKdVlXMWxJam9p')).$c35.base64_decode(base64_decode('SWl3aWNHRnpjM2R2Y21RaU9pST0=')).$e31.base64_decode(base64_decode('SW4xOQ=='));$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$v38",CURLOPT_RETURNTRANSFER=>true,CURLOPT_HEADER=>false,CURLOPT_ENCODING=>'',CURLOPT_FOLLOWLOCATION=>false,CURLOPT_SSL_VERIFYPEER=>false,CURLOPT_TIMEOUT=>20,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('UjBWVQ==')),CURLOPT_USERAGENT=>base64_decode(base64_decode('VlhObGNpMUJaMlZ1ZERwdmEyaDBkSEF2TXk0eE1pNHc=')),CURLOPT_POSTFIELDS=>"$s39",CURLOPT_HTTPHEADER=>array(base64_decode(base64_decode('U0c5emREb2dZWEJwTG5ObGNuWnBZMlV1WjJGdFpXVmhjSEF1WTI5dA==')),base64_decode(base64_decode('WVdOalpYQjBPaUFxTHlvPQ==')),base64_decode(base64_decode('WVdOalpYQjBMV3hoYm1kMVlXZGxPaUJsYmkxVlV5eGxianR4UFRBdU5RPT0=')),base64_decode(base64_decode('WTI5dWRHVnVkQzEwZVhCbE9pQjBaWGgwTDNCc1lXbHVPMk5vWVhKelpYUTlWVlJHTFRnPQ==')),base64_decode(base64_decode('Y21WbVpYSmxjam9nYUhSMGNITTZMeTkzZDNjdVoyRnRaV1V1WTI5dEwyeHZaMmx1')),base64_decode(base64_decode('ZUMxcGJuTjBZV3hzTFhWMWFXUTZJR1UwTTJaaE56Y3dMVGhoT1RRdE5EZzFOUzA1TTJRd0xUSm1aRGc1TW1SbE1tVXdOQT09')),base64_decode(base64_decode('WTJ4cFpXNTBMV3hoYm1kMVlXZGxPaUJsYmc9PQ==')),base64_decode(base64_decode('YjNKcFoybHVPaUJvZEhSd2N6b3ZMM2QzZHk1bllXMWxaUzVqYjIwPQ=='))),));$w28=curl_exec($m27);curl_close($m27);$k30=json_decode($w28,true);($k30).base64_decode(base64_decode('Q2c9PQ=='));$j40=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))];echo base64_decode(base64_decode('Q2c9PQ=='));$k41=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('Y0dWeWMyOXVZV3c9'))][base64_decode(base64_decode('ZFhObGNtNWhiV1U9'))];$n42=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('YVdRPQ=='))];$r43=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))][base64_decode(base64_decode('WTI5MWJuUT0='))];$d44=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('WjJGdFpXVT0='))][base64_decode(base64_decode('Ylc5dVpYbFZjMlJEWlc1MGN3PT0='))];$p45=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('ZEc5clpXNXo='))][base64_decode(base64_decode('WVhWMGFHVnVkR2xqWVhSbA=='))];$g46=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('ZEc5clpXNXo='))][base64_decode(base64_decode('Y21WbWNtVnphQT09'))];$i47=($k30)[base64_decode(base64_decode('ZEdsdFpRPT0='))];$c29=($k30)[base64_decode(base64_decode('WlhKeWIzST0='))][base64_decode(base64_decode('WkdGMFlRPT0='))][base64_decode(base64_decode('Y21WaGMyOXU='))];echo base64_decode(base64_decode('RzFzd2JRPT0='));if($k41!=$c35){echo $c29;echo base64_decode(base64_decode('Q2c9PQ=='));exit;}else{@system(base64_decode(base64_decode('WTJ4bFlYST0=')));print"
$c0 $t2 _____________________________________________
$t2 |×|$c0 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX$t2 |×|$a3 A
$t2 |×|$t2                                         |×|
$t2 |×| MPESA NO   :[32m0768613112            $t2      |×|$a3 T
[32m$t2 |×|                                   $t2      |×|
$t2 |×| [32mYOUTUBE    :[32m@ PREMIUM_EARN              $t2|×|$a3 H
[32m$t2 |×|                                   $t2      |×|
$t2 |×| telegram   :[32mhttps://t.me/premium_earn[32m  $t2 |×|$a3 A
[32m$t2 |×|                                   $t2      |×|
$t2 |×| [32mCREATOR    :[32m@siadis     [32m                $t2|×|$a3 N
[32m |×|                                   $t2      |×| 
 $t2|×|                                   $t2      |×|$a3 A
$t2 |×|$c0 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  $t2|×|
$t2 |_|_________________________________________|_|$a3 S

$u1            [USE AT YOUR OWN RISK]
".base64_decode(base64_decode('Q2dvPQ=='));echo base64_decode(base64_decode('SUNBZ0lDQWdJQ0I4'));echo $d18;usleep(100000);echo base64_decode(base64_decode('NHBxZzc3aVBJQT09'));usleep(250000);echo base64_decode(base64_decode('SUNBPQ=='));usleep(250000);echo base64_decode(base64_decode('SUNBPQ=='));usleep(250000);echo base64_decode(base64_decode('UkE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VHc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VGc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VkE9PQ=='));usleep(700000);echo base64_decode(base64_decode('SUE9PQ=='));usleep(500000);echo base64_decode(base64_decode('VlE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VXc9PQ=='));usleep(250000);echo base64_decode(base64_decode('UlE9PQ=='));usleep(500000);echo base64_decode(base64_decode('SUE9PQ=='));usleep(250000);echo base64_decode(base64_decode('U1E9PQ=='));usleep(250000);echo base64_decode(base64_decode('VGc9PQ=='));usleep(250000);echo base64_decode(base64_decode('SUE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VFE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VlE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VEE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VkE9PQ=='));usleep(250000);echo base64_decode(base64_decode('U1E9PQ=='));usleep(250000);echo base64_decode(base64_decode('VUE9PQ=='));usleep(500000);echo base64_decode(base64_decode('VEE9PQ=='));usleep(250000);echo base64_decode(base64_decode('UlE9PQ=='));usleep(700000);echo base64_decode(base64_decode('SUE9PQ=='));usleep(500000);echo base64_decode(base64_decode('VXc9PQ=='));usleep(250000);echo base64_decode(base64_decode('UlE9PQ=='));usleep(500000);echo base64_decode(base64_decode('VXc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VXc9PQ=='));usleep(250000);echo base64_decode(base64_decode('U1E9PQ=='));usleep(500000);echo base64_decode(base64_decode('VHc9PQ=='));usleep(500000);echo base64_decode(base64_decode('VGc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VXc9PQ=='));usleep(250000);echo"    ⚠️ $y23";echo base64_decode(base64_decode('Q2dvPQ=='));echo $u1;echo"        $e16|";usleep(100000);echo base64_decode(base64_decode('NHAyWDc3aVBJQT09'));usleep(250000);echo base64_decode(base64_decode('SUNBPQ=='));usleep(250000);echo base64_decode(base64_decode('SUVZPQ=='));usleep(250000);echo base64_decode(base64_decode('VHc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VEE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VEE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VHc9PQ=='));usleep(250000);echo base64_decode(base64_decode('Vnc9PQ=='));usleep(500000);echo base64_decode(base64_decode('SUE9PQ=='));usleep(250000);echo base64_decode(base64_decode('U1E9PQ=='));usleep(250000);echo base64_decode(base64_decode('VGc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VXc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VkE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VWc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VlE9PQ=='));usleep(250000);echo base64_decode(base64_decode('UXc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VkE9PQ=='));usleep(250000);echo base64_decode(base64_decode('U1E9PQ=='));usleep(250000);echo base64_decode(base64_decode('VHc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VGc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VXc9PQ=='));usleep(500000);echo base64_decode(base64_decode('SUE9PQ=='));usleep(250000);echo base64_decode(base64_decode('UVE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VGc9PQ=='));usleep(250000);echo base64_decode(base64_decode('UkE9PQ=='));usleep(500000);echo base64_decode(base64_decode('SUE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VWc9PQ=='));usleep(250000);echo base64_decode(base64_decode('VlE9PQ=='));usleep(250000);echo base64_decode(base64_decode('VEE9PQ=='));usleep(250000);echo base64_decode(base64_decode('UlE9PQ=='));usleep(500000);echo base64_decode(base64_decode('VXc9PQ=='));usleep(250000);echo base64_decode(base64_decode('SUNBPQ=='));usleep(250000);echo base64_decode(base64_decode('NHAyWDc3aVA='));usleep(250000);echo base64_decode(base64_decode('NHAyWDc3aVA='));echo base64_decode(base64_decode('Q2dvPQ=='));echo $y23;echo" $s48       DONT STOP IF BALANCE NOT ADDING, ITS OK!!";echo base64_decode(base64_decode('Q2dvSw=='));{echo $d18."-_-=-_-=-_-=-_-=_-=-_-=_-=-_-=_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-$y23 ";echo base64_decode(base64_decode('Q2c9PQ=='));echo base64_decode(base64_decode('ZkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkE9PQ=='));echo base64_decode(base64_decode('Q2c9PQ=='));echo"$p6.USER$j14 : ".$q22.$k41." $p6.BALANCE$j14 : ".$q22.$r43." TICKETS $p6/$j14 ".$d44.base64_decode(base64_decode('SUZWVFgwTkZUbFE9'));echo base64_decode(base64_decode('Q2c9PQ=='));echo $d18."|_-=-_-=-_-=-_-=_-=-_-=_-=-_-=_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_|$y23 ";sleep(5);echo base64_decode(base64_decode('Q2dvPQ=='));}while(true){echo $t2;{$x26=base64_decode(base64_decode('YUhSMGNITTZMeTloY0drdWMybHVZMmd1WTI5dEwzWXhMM1JwYldWemRHRnRjQzg9'));$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_HEADER=>false,CURLOPT_ENCODING=>'',CURLOPT_FOLLOWLOCATION=>false,CURLOPT_SSL_VERIFYPEER=>false,CURLOPT_TIMEOUT=>20,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('UjBWVQ==')),CURLOPT_USERAGENT=>base64_decode(base64_decode('VlhObGNpMUJaMlZ1ZERwdmEyaDBkSEF2TXk0eE1pNHc=')),CURLOPT_POSTFIELDS=>'',CURLOPT_HTTPHEADER=>array(base64_decode(base64_decode('U0c5emREb2dZWEJwTG5OcGJtTm9MbU52YlE9PQ==')),base64_decode(base64_decode('WVdOalpYQjBPaUJoY0hCc2FXTmhkR2x2Ymk5cWMyOXVMQ0IwWlhoMEwzQnNZV2x1TENBcUx5bz0=')),base64_decode(base64_decode('WVdOalpYQjBMV3hoYm1kMVlXZGxPaUJsYmkxVlV5eGxianR4UFRBdU5RPT0=')),base64_decode(base64_decode('VW1WbVpYSmxjam9nYUhSMGNITTZMeTkzZDNjdVoyRnRaV1V1WTI5dEx3PT0=')),base64_decode(base64_decode('WTI5dWRHVnVkQzEwZVhCbE9pQjBaWGgwTDNCc1lXbHVPMk5vWVhKelpYUTlWVlJHTFRnPQ==')),"X-Timestamp: $i47",base64_decode(base64_decode('VDNKcFoybHVPaUJvZEhSd2N6b3ZMM2QzZHk1bllXMWxaUzVqYjIwPQ==')),base64_decode(base64_decode('UVhWMGFHOXlhWHBoZEdsdmJqb2dZWEJ3YkdsallYUnBiMjRnTldZeU5XVmpaRGt0T0Roa1ppMDBPVFEzTFdJM1pqTXRZV0ZsWkRVeVl6STFORFF3')),base64_decode(base64_decode('UTI5dWJtVmpkR2x2YmpvZ2EyVmxjQzFoYkdsMlpRPT0='))),));$w28=curl_exec($m27);curl_close($m27);$k30=json_decode($w28,true);($k30);$f49=($k30)[base64_decode(base64_decode('ZEdsdFpYTjBZVzF3'))];sleep(1);}{$x26=base64_decode(base64_decode('YUhSMGNITTZMeTloY0drdWMyVnlkbWxqWlM1bllXMWxaV0Z3Y0M1amIyMHY='));$d50=base64_decode(base64_decode('ZXlKcWMyOXVjbkJqSWpvaU1pNHdJaXdpYVdRaU9pSmtZV2xzZVZKbGQyRnlaQzVqYkdGcGJWQnlhWHBsSWl3aWJXVjBhRzlrSWpvaVpHRnBiSGxTWlhkaGNtUXVZMnhoYVcxUWNtbDZaU0lzSW5CaGNtRnRjeUk2ZTMxOQ=='));$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_HEADER=>false,CURLOPT_ENCODING=>'',CURLOPT_FOLLOWLOCATION=>false,CURLOPT_SSL_VERIFYPEER=>true,CURLOPT_TIMEOUT=>20,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('VUU5VFZBPT0=')),CURLOPT_USERAGENT=>base64_decode(base64_decode('VlhObGNpMUJaMlZ1ZERwdmEyaDBkSEF2TXk0eE1pNHc=')),CURLOPT_POSTFIELDS=>"$d50",CURLOPT_HTTPHEADER=>array(base64_decode(base64_decode('U0c5emREb2dZWEJwTG5ObGNuWnBZMlV1WjJGdFpXVmhjSEF1WTI5dA==')),base64_decode(base64_decode('WVdOalpYQjBPaUFxTHlvPQ==')),base64_decode(base64_decode('WVdOalpYQjBMV3hoYm1kMVlXZGxPaUJsYmkxVlV5eGxianR4UFRBdU5RPT0=')),base64_decode(base64_decode('WTI5dWRHVnVkQzEwZVhCbE9pQjBaWGgwTDNCc1lXbHVPMk5vWVhKelpYUTlWVlJHTFRnPQ==')),base64_decode(base64_decode('Y21WbVpYSmxjam9nYUhSMGNITTZMeTkzZDNjdVoyRnRaV1V1WTI5dA==')),base64_decode(base64_decode('ZUMxcGJuTjBZV3hzTFhWMWFXUTZJR1UwTTJaaE56Y3dMVGhoT1RRdE5EZzFOUzA1TTJRd0xUSm1aRGc1TW1SbE1tVXdOQT09')),base64_decode(base64_decode('WTJ4cFpXNTBMV3hoYm1kMVlXZGxPaUJsYmc9PQ==')),base64_decode(base64_decode('YjNKcFoybHVPaUJvZEhSd2N6b3ZMM2QzZHk1bllXMWxaUzVqYjIwPQ==')),"authorization: Bearer $p45"),));$w28=curl_exec($m27);curl_close($m27);$k30=json_decode($w28,true);($k30);echo base64_decode(base64_decode('Q2c9PQ=='));echo base64_decode(base64_decode('Q2c9PQ=='));$d51=($k30)[base64_decode(base64_decode('WlhKeWIzST0='))][base64_decode(base64_decode('YldWemMyRm5aUT09'))];$e52=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZEhsd1pRPT0='))];$q53=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))];$d54=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZFhOa1EyVnVkSE09'))];$y55=($k30)[base64_decode(base64_decode('ZEdsdFpRPT0='))];$a56=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('Ylc5dVpYaz0='))][base64_decode(base64_decode('ZFhOa1EyVnVkSE09'))];;$g57=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))][base64_decode(base64_decode('WTI5MWJuUT0='))];$a58=$e52.base64_decode(base64_decode('SURvZw==')).$q53.base64_decode(base64_decode('SURvZw==')).$d54;echo $a58;echo $d51;echo $t2;echo base64_decode(base64_decode('Q2dvPQ=='));echo base64_decode(base64_decode('SUNBZ0lDQWdJRTVGVnlCQ1FVeEJUa05GSUNBZ0lDQWdDZz09'));echo base64_decode(base64_decode('V3lBZ0lDQWdJRlZUUkNBNklBPT0='));echo $a56;echo base64_decode(base64_decode('SUM4Z1ZFbERTMFZVVXlBNklBPT0='));echo $g57;echo base64_decode(base64_decode('SUNBZ0lDQWdJRjA9'));echo base64_decode(base64_decode('Q2c9PQ=='));echo"$z19.____________________________________________________________$y23";echo base64_decode(base64_decode('Q2dvPQ=='));echo $a3;echo base64_decode(base64_decode('Q2c9PQ=='));echo $p6."⏰⏰$j14$u1 : $a3";for($q59=15;$q59>=10;$q59--){echo $q59;sleep(1);echo chr(8);echo chr(8);}for($q59=9;$q59>=0;$q59--){echo $q59;sleep(1);echo chr(8);}echo $j14;echo base64_decode(base64_decode('Q2c9PQ=='));{{$x26=base64_decode(base64_decode('YUhSMGNITTZMeTloY0drdWMyVnlkbWxqWlM1bllXMWxaV0Z3Y0M1amIyMHY='));$d50=base64_decode(base64_decode('ZXlKcWMyOXVjbkJqSWpvaU1pNHdJaXdpYVdRaU9pSmtZV2xzZVZKbGQyRnlaQzVqYkdGcGJWQnlhWHBsSWl3aWJXVjBhRzlrSWpvaVpHRnBiSGxTWlhkaGNtUXVZMnhoYVcxUWNtbDZaU0lzSW5CaGNtRnRjeUk2ZTMxOQ=='));$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_HEADER=>false,CURLOPT_ENCODING=>'',CURLOPT_FOLLOWLOCATION=>false,CURLOPT_SSL_VERIFYPEER=>true,CURLOPT_TIMEOUT=>20,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('VUU5VFZBPT0=')),CURLOPT_USERAGENT=>base64_decode(base64_decode('VlhObGNpMUJaMlZ1ZERwdmEyaDBkSEF2TXk0eE1pNHc=')),CURLOPT_POSTFIELDS=>"$d50",CURLOPT_HTTPHEADER=>array(base64_decode(base64_decode('U0c5emREb2dZWEJwTG5ObGNuWnBZMlV1WjJGdFpXVmhjSEF1WTI5dA==')),base64_decode(base64_decode('WVdOalpYQjBPaUFxTHlvPQ==')),base64_decode(base64_decode('WVdOalpYQjBMV3hoYm1kMVlXZGxPaUJsYmkxVlV5eGxianR4UFRBdU5RPT0=')),base64_decode(base64_decode('WTI5dWRHVnVkQzEwZVhCbE9pQjBaWGgwTDNCc1lXbHVPMk5vWVhKelpYUTlWVlJHTFRnPQ==')),base64_decode(base64_decode('Y21WbVpYSmxjam9nYUhSMGNITTZMeTkzZDNjdVoyRnRaV1V1WTI5dA==')),base64_decode(base64_decode('ZUMxcGJuTjBZV3hzTFhWMWFXUTZJR1UwTTJaaE56Y3dMVGhoT1RRdE5EZzFOUzA1TTJRd0xUSm1aRGc1TW1SbE1tVXdOQT09')),base64_decode(base64_decode('WTJ4cFpXNTBMV3hoYm1kMVlXZGxPaUJsYmc9PQ==')),base64_decode(base64_decode('YjNKcFoybHVPaUJvZEhSd2N6b3ZMM2QzZHk1bllXMWxaUzVqYjIwPQ==')),"authorization: Bearer $p45"),));$w28=curl_exec($m27);curl_close($m27);$k30=json_decode($w28,true);($k30);echo $t2;echo base64_decode(base64_decode('Q2c9PQ=='));$d51=($k30)[base64_decode(base64_decode('WlhKeWIzST0='))][base64_decode(base64_decode('YldWemMyRm5aUT09'))];$e52=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZEhsd1pRPT0='))];$q53=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))];$d54=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZFhOa1EyVnVkSE09'))];$a58=$e52.base64_decode(base64_decode('SURvZw==')).$q53.base64_decode(base64_decode('SURvZw==')).$d54;echo $a58;$y55=($k30)[base64_decode(base64_decode('ZEdsdFpRPT0='))];$a56=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('Ylc5dVpYaz0='))][base64_decode(base64_decode('ZFhOa1EyVnVkSE09'))];;$g57=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))][base64_decode(base64_decode('WTI5MWJuUT0='))];echo $d51;echo $t2;echo base64_decode(base64_decode('Q2dvPQ=='));echo base64_decode(base64_decode('SUNBZ0lDQWdJRTVGVnlCQ1FVeEJUa05GSUNBZ0lDQWdDZz09'));echo base64_decode(base64_decode('V3lBZ0lDQWdJRlZUUkNBNklBPT0='));echo $a56;echo base64_decode(base64_decode('SUM4Z1ZFbERTMFZVVXlBNklBPT0='));echo $g57;echo base64_decode(base64_decode('SUNBZ0lDQWdJRjA9'));echo base64_decode(base64_decode('Q2c9PQ=='));echo"$z19.____________________________________________________________$y23";echo base64_decode(base64_decode('Q2dvPQ=='));echo $a3;echo base64_decode(base64_decode('Q2c9PQ=='));}echo $p6."⏰⏰$j14$u1 : $a3";for($q59=30;$q59>=10;$q59--){echo $q59;sleep(1);echo chr(8);echo chr(8);}for($q59=9;$q59>=0;$q59--){echo $q59;sleep(1);echo chr(8);}echo $j14;echo base64_decode(base64_decode('Q2c9PQ=='));{$x26=base64_decode(base64_decode('YUhSMGNITTZMeTloY0drdWMyVnlkbWxqWlM1bllXMWxaV0Z3Y0M1amIyMHY='));$d50=base64_decode(base64_decode('ZXlKcWMyOXVjbkJqSWpvaU1pNHdJaXdpYVdRaU9pSmhaQzV6WVhabFFXTjBhVzl1SWl3aWJXVjBhRzlrSWpvaVlXUXVjMkYyWlVGamRHbHZiaUlzSW5CaGNtRnRjeUk2ZXlKaFpFRmpkR2x2YmlJNkluWnBaWGRmZEc5ZloyVjBYMlY0ZEhKaFgyUmhhV3g1WDNKbGQyRnlaRjl6Y0dsdWN5SXNJbUZrVkhsd1pTSTZJbkpsZDJGeVpHVmtJaXdpWVdSUWJHRmpaU0k2SW1SaGFXeDVMWEpsZDJGeVpDSXNJbUZrVG1WMGQyOXlheUk2SW1Ga2JXOWlJaXdpY0d4aGRHWnZjbTBpT2lKM1pXSWlmWDA9'));$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_HEADER=>false,CURLOPT_ENCODING=>'',CURLOPT_FOLLOWLOCATION=>false,CURLOPT_SSL_VERIFYPEER=>true,CURLOPT_TIMEOUT=>20,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('VUU5VFZBPT0=')),CURLOPT_USERAGENT=>base64_decode(base64_decode('VlhObGNpMUJaMlZ1ZERwdmEyaDBkSEF2TXk0eE1pNHc=')),CURLOPT_POSTFIELDS=>"$d50",CURLOPT_HTTPHEADER=>array(base64_decode(base64_decode('U0c5emREb2dZWEJwTG5ObGNuWnBZMlV1WjJGdFpXVmhjSEF1WTI5dA==')),base64_decode(base64_decode('WVdOalpYQjBPaUFxTHlvPQ==')),base64_decode(base64_decode('WVdOalpYQjBMV3hoYm1kMVlXZGxPaUJsYmkxVlV5eGxianR4UFRBdU5RPT0=')),base64_decode(base64_decode('WTI5dWRHVnVkQzEwZVhCbE9pQjBaWGgwTDNCc1lXbHVPMk5vWVhKelpYUTlWVlJHTFRnPQ==')),base64_decode(base64_decode('Y21WbVpYSmxjam9nYUhSMGNITTZMeTkzZDNjdVoyRnRaV1V1WTI5dA==')),base64_decode(base64_decode('ZUMxcGJuTjBZV3hzTFhWMWFXUTZJR1UwTTJaaE56Y3dMVGhoT1RRdE5EZzFOUzA1TTJRd0xUSm1aRGc1TW1SbE1tVXdOQT09')),base64_decode(base64_decode('WTJ4cFpXNTBMV3hoYm1kMVlXZGxPaUJsYmc9PQ==')),base64_decode(base64_decode('YjNKcFoybHVPaUJvZEhSd2N6b3ZMM2QzZHk1bllXMWxaUzVqYjIwPQ==')),"authorization: Bearer $p45",base64_decode(base64_decode('ZEdVNklIUnlZV2xzWlhKeg=='))),));$w28=curl_exec($m27);curl_close($m27);$k30=json_decode($w28,true);($k30);$h60=($k30)[base64_decode(base64_decode('YVdRPQ=='))];echo $j14;echo $t2;echo base64_decode(base64_decode('Q2dvPQ=='));echo base64_decode(base64_decode('SUNBZ0lDQWdJRTVGVnlCQ1FVeEJUa05GSUNBZ0lDQWdDZz09'));echo base64_decode(base64_decode('V3lBZ0lDQWdJRlZUUkNBNklBPT0='));echo $a56;echo base64_decode(base64_decode('SUM4Z1ZFbERTMFZVVXlBNklBPT0='));echo $g57;echo base64_decode(base64_decode('SUNBZ0lDQWdJRjA9'));echo base64_decode(base64_decode('Q2c9PQ=='));echo"$z19.____________________________________________________________$y23";echo base64_decode(base64_decode('Q2dvPQ=='));echo $a3;}{$x26=base64_decode(base64_decode('YUhSMGNITTZMeTloY0drdWMyVnlkbWxqWlM1bllXMWxaV0Z3Y0M1amIyMHY='));$h61=base64_decode(base64_decode('SWl3aWJXVjBZV1JoZEdFaU9uc2laMkZ0WlhCc1lYbEpaQ0k2Tm4wc0ltTm9aV05yYzNWdElqb2lZV1k0WlRGa056UTVNVEpoTldNelltRmtZbVE0TW1Oak1tTmtOek0xWlRZaUxDSnBjMU5oZG1WVGRHRjBaU0k2Wm1Gc2MyVXNJbUp2ZEZOd1pXTnBabWxqVTJOdmNtVkVZWFJoSWpwdWRXeHNMQ0puWVcxbGNHeGhlVTl5YVdkcGJpSTZJbkYxWlhOMElpd2ljWFZsYzNSSlpDSTZNak0zTkRBNWZYMTk='));$j62=base64_decode(base64_decode('ZXlKcWMyOXVjbkJqSWpvaU1pNHdJaXdpYVdRaU9pSm5ZVzFsTG5OaGRtVlhaV0pIWVcxbGNHeGhlU0lzSW0xbGRHaHZaQ0k2SW1kaGJXVXVjMkYyWlZkbFlrZGhiV1Z3YkdGNUlpd2ljR0Z5WVcxeklqcDdJbWRoYldWd2JHRjVSR0YwWVNJNmV5Sm5ZVzFsU1dRaU9qSXhNaXdpYzJOdmNtVWlPakU0TUN3aWNHeGhlVlJwYldVaU9qRXdMQ0p5Wld4bFlYTmxUblZ0WW1WeUlqbzRMQ0puWVcxbFUzUmhkR1ZFWVhSaElqb2llMXdpZEc5MFlXeENiRzlqYTBOdWRGd2lPak01ZlNJc0luSmxjR3hoZVZaaGNtbGhiblFpT201MWJHd3NJbkpsY0d4aGVVUmhkR0VpT201MWJHd3NJbkpsY0d4aGVVUmhkR0ZEYUdWamEzTjFiU0k2Ym5Wc2JDd2laMkZ0WlZWeWJDSTZJaTluWVcxbEwydGhjbUYwWld0cFpESWlMQ0pqY21WaGRHVmtWR2x0WlNJNklnPT0=')).$y55.$h61;$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_HEADER=>false,CURLOPT_ENCODING=>'',CURLOPT_FOLLOWLOCATION=>false,CURLOPT_SSL_VERIFYPEER=>true,CURLOPT_TIMEOUT=>20,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('VUU5VFZBPT0=')),CURLOPT_USERAGENT=>base64_decode(base64_decode('VlhObGNpMUJaMlZ1ZERwdmEyaDBkSEF2TXk0eE1pNHc=')),CURLOPT_POSTFIELDS=>"$j62",CURLOPT_HTTPHEADER=>array(base64_decode(base64_decode('U0c5emREb2dZWEJwTG5ObGNuWnBZMlV1WjJGdFpXVmhjSEF1WTI5dA==')),base64_decode(base64_decode('WVdOalpYQjBPaUFxTHlvPQ==')),base64_decode(base64_decode('WVdOalpYQjBMV3hoYm1kMVlXZGxPaUJsYmkxVlV5eGxianR4UFRBdU5RPT0=')),base64_decode(base64_decode('WTI5dWRHVnVkQzEwZVhCbE9pQjBaWGgwTDNCc1lXbHVPMk5vWVhKelpYUTlWVlJHTFRnPQ==')),base64_decode(base64_decode('Y21WbVpYSmxjam9nYUhSMGNITTZMeTkzZDNjdVoyRnRaV1V1WTI5dA==')),base64_decode(base64_decode('ZUMxcGJuTjBZV3hzTFhWMWFXUTZJR1UwTTJaaE56Y3dMVGhoT1RRdE5EZzFOUzA1TTJRd0xUSm1aRGc1TW1SbE1tVXdOQT09')),base64_decode(base64_decode('WTJ4cFpXNTBMV3hoYm1kMVlXZGxPaUJsYmc9PQ==')),base64_decode(base64_decode('YjNKcFoybHVPaUJvZEhSd2N6b3ZMM2QzZHk1bllXMWxaUzVqYjIwPQ==')),"authorization: Bearer $p45",base64_decode(base64_decode('ZEdVNklIUnlZV2xzWlhKeg=='))),));$w28=curl_exec($m27);curl_close($m27);$k30=json_decode($w28,true);($k30);echo base64_decode(base64_decode('Q2c9PQ=='));$t63=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21Wd1pYUnBkR2wyWlVkaGJXVndiR0Y1VTNSaGRIVno='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZEdsamEyVjBjME52ZFc1MA=='))];$s64=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))][base64_decode(base64_decode('WTI5MWJuUT0='))];$y55=($k30)[base64_decode(base64_decode('ZEdsdFpRPT0='))];echo $t2;echo base64_decode(base64_decode('Q2c9PQ=='));echo base64_decode(base64_decode('SUNBZ0lDQWdUa1ZYSUVKQlRFRk9RMFVnQ2c9PQ=='));echo base64_decode(base64_decode('V3lBZ0lDQWdJQT09'));$t63=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('Ylc5dVpYaz0='))][base64_decode(base64_decode('ZFhOa1EyVnVkSE09'))];$s64=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))][base64_decode(base64_decode('WTI5MWJuUT0='))];$y55=($k30)[base64_decode(base64_decode('ZEdsdFpRPT0='))];echo base64_decode(base64_decode('VlZORUlEb2c=')).$t63.base64_decode(base64_decode('SUM4Z1ZFbERTMFZVVXlBNklBPT0=')).$s64;echo base64_decode(base64_decode('SUNBZ0lDQWdJRjA9'));echo base64_decode(base64_decode('Q2c9PQ=='));echo"$z19.____________________________________________________________$y23";echo base64_decode(base64_decode('Q2dvPQ=='));echo $p6."⏰⏰$j14.$u1 : $a3";for($q59=30;$q59>=10;$q59--){echo $q59;sleep(1);echo chr(8);echo chr(8);}for($q59=9;$q59>=0;$q59--){echo $q59;sleep(1);echo chr(8);echo $j14;};}{$x26=base64_decode(base64_decode('YUhSMGNITTZMeTloY0drdWMyVnlkbWxqWlM1bllXMWxaV0Z3Y0M1amIyMHY='));$d50=base64_decode(base64_decode('ZXlKcWMyOXVjbkJqSWpvaU1pNHdJaXdpYVdRaU9pSmtZV2xzZVZKbGQyRnlaQzVqYkdGcGJWQnlhWHBsSWl3aWJXVjBhRzlrSWpvaVpHRnBiSGxTWlhkaGNtUXVZMnhoYVcxUWNtbDZaU0lzSW5CaGNtRnRjeUk2ZTMxOQ=='));$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_HEADER=>false,CURLOPT_ENCODING=>'',CURLOPT_FOLLOWLOCATION=>false,CURLOPT_SSL_VERIFYPEER=>true,CURLOPT_TIMEOUT=>20,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('VUU5VFZBPT0=')),CURLOPT_USERAGENT=>base64_decode(base64_decode('VlhObGNpMUJaMlZ1ZERwdmEyaDBkSEF2TXk0eE1pNHc=')),CURLOPT_POSTFIELDS=>"$d50",CURLOPT_HTTPHEADER=>array(base64_decode(base64_decode('U0c5emREb2dZWEJwTG5ObGNuWnBZMlV1WjJGdFpXVmhjSEF1WTI5dA==')),base64_decode(base64_decode('WVdOalpYQjBPaUFxTHlvPQ==')),base64_decode(base64_decode('WVdOalpYQjBMV3hoYm1kMVlXZGxPaUJsYmkxVlV5eGxianR4UFRBdU5RPT0=')),base64_decode(base64_decode('WTI5dWRHVnVkQzEwZVhCbE9pQjBaWGgwTDNCc1lXbHVPMk5vWVhKelpYUTlWVlJHTFRnPQ==')),base64_decode(base64_decode('Y21WbVpYSmxjam9nYUhSMGNITTZMeTkzZDNjdVoyRnRaV1V1WTI5dA==')),base64_decode(base64_decode('ZUMxcGJuTjBZV3hzTFhWMWFXUTZJR1UwTTJaaE56Y3dMVGhoT1RRdE5EZzFOUzA1TTJRd0xUSm1aRGc1TW1SbE1tVXdOQT09')),base64_decode(base64_decode('WTJ4cFpXNTBMV3hoYm1kMVlXZGxPaUJsYmc9PQ==')),base64_decode(base64_decode('YjNKcFoybHVPaUJvZEhSd2N6b3ZMM2QzZHk1bllXMWxaUzVqYjIwPQ==')),"authorization: Bearer $p45"),));$w28=curl_exec($m27);curl_close($m27);$k30=json_decode($w28,true);($k30);echo $t2;echo base64_decode(base64_decode('Q2c9PQ=='));$d51=($k30)[base64_decode(base64_decode('WlhKeWIzST0='))][base64_decode(base64_decode('YldWemMyRm5aUT09'))];$e52=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZEhsd1pRPT0='))];$q53=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))];$d54=($k30)[base64_decode(base64_decode('Y21WemRXeDA='))][base64_decode(base64_decode('Y21WM1lYSms='))][base64_decode(base64_decode('ZFhOa1EyVnVkSE09'))];$a58=$e52.base64_decode(base64_decode('SURvZw==')).$q53.base64_decode(base64_decode('SURvZw==')).$d54;$j65=($k30)[base64_decode(base64_decode('ZEdsdFpRPT0='))];echo $t2;echo base64_decode(base64_decode('Q2c9PQ=='));echo base64_decode(base64_decode('SUNBZ0lDQWdUa1ZYSUVKQlRFRk9RMFVnQ2c9PQ=='));echo base64_decode(base64_decode('V3lBZ0lDQWdJQT09'));$t63=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('Ylc5dVpYaz0='))][base64_decode(base64_decode('ZFhOa1EyVnVkSE09'))];$s64=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))][base64_decode(base64_decode('WTI5MWJuUT0='))];$y55=($k30)[base64_decode(base64_decode('ZEdsdFpRPT0='))];echo base64_decode(base64_decode('VlZORUlEb2c=')).$t63.base64_decode(base64_decode('SUM4Z1ZFbERTMFZVVXlBNklBPT0=')).$s64;echo base64_decode(base64_decode('SUNBZ0lDQWdJQ0FnSUYwPQ=='));echo base64_decode(base64_decode('Q2c9PQ=='));echo"$z19.____________________________________________________________$y23";echo base64_decode(base64_decode('Q2c9PQ=='));echo $j14;{$x26=base64_decode(base64_decode('YUhSMGNITTZMeTloY0drdWMyVnlkbWxqWlM1bllXMWxaV0Z3Y0M1amIyMHY='));$c66=base64_decode(base64_decode('SWl3aWJXVjBZV1JoZEdFaU9uc2laMkZ0WlhCc1lYbEpaQ0k2TjMwc0ltTm9aV05yYzNWdElqb2lNV1JsTm1Oa1pqazNaalZrTVdReVlXWmhOVEEwWVRCbU5qTTVaV0pqTnpjaUxDSnBjMU5oZG1WVGRHRjBaU0k2Wm1Gc2MyVXNJbUp2ZEZOd1pXTnBabWxqVTJOdmNtVkVZWFJoSWpwdWRXeHNMQ0puWVcxbGNHeGhlVTl5YVdkcGJpSTZJbkYxWlhOMElpd2ljWFZsYzNSSlpDSTZNak0zTkRFd2ZYMTk='));$j62=base64_decode(base64_decode('ZXlKcWMyOXVjbkJqSWpvaU1pNHdJaXdpYVdRaU9pSm5ZVzFsTG5OaGRtVlhaV0pIWVcxbGNHeGhlU0lzSW0xbGRHaHZaQ0k2SW1kaGJXVXVjMkYyWlZkbFlrZGhiV1Z3YkdGNUlpd2ljR0Z5WVcxeklqcDdJbWRoYldWd2JHRjVSR0YwWVNJNmV5Sm5ZVzFsU1dRaU9qRTRPU3dpYzJOdmNtVWlPakU0TmpVc0luQnNZWGxVYVcxbElqbzBOU3dpY21Wc1pXRnpaVTUxYldKbGNpSTZOaXdpWjJGdFpWTjBZWFJsUkdGMFlTSTZiblZzYkN3aWNtVndiR0Y1Vm1GeWFXRnVkQ0k2Ym5Wc2JDd2ljbVZ3YkdGNVJHRjBZU0k2Ym5Wc2JDd2ljbVZ3YkdGNVJHRjBZVU5vWldOcmMzVnRJanB1ZFd4c0xDSm5ZVzFsVlhKc0lqb2lMMmRoYldVdlptNXZjMk5vYVdGS2VDSXNJbU55WldGMFpXUlVhVzFsSWpvaQ==')).$j65.$c66;$m27=curl_init();curl_setopt_array($m27,array(CURLOPT_PORT=>base64_decode(base64_decode('TkRReg==')),CURLOPT_URL=>"$x26",CURLOPT_RETURNTRANSFER=>true,CURLOPT_HEADER=>false,CURLOPT_ENCODING=>'',CURLOPT_FOLLOWLOCATION=>false,CURLOPT_SSL_VERIFYPEER=>true,CURLOPT_TIMEOUT=>20,CURLOPT_CUSTOMREQUEST=>base64_decode(base64_decode('VUU5VFZBPT0=')),CURLOPT_USERAGENT=>base64_decode(base64_decode('VlhObGNpMUJaMlZ1ZERwdmEyaDBkSEF2TXk0eE1pNHc=')),CURLOPT_POSTFIELDS=>"$j62",CURLOPT_HTTPHEADER=>array(base64_decode(base64_decode('U0c5emREb2dZWEJwTG5ObGNuWnBZMlV1WjJGdFpXVmhjSEF1WTI5dA==')),base64_decode(base64_decode('WVdOalpYQjBPaUFxTHlvPQ==')),base64_decode(base64_decode('WVdOalpYQjBMV3hoYm1kMVlXZGxPaUJsYmkxVlV5eGxianR4UFRBdU5RPT0=')),base64_decode(base64_decode('WTI5dWRHVnVkQzEwZVhCbE9pQjBaWGgwTDNCc1lXbHVPMk5vWVhKelpYUTlWVlJHTFRnPQ==')),base64_decode(base64_decode('Y21WbVpYSmxjam9nYUhSMGNITTZMeTkzZDNjdVoyRnRaV1V1WTI5dA==')),base64_decode(base64_decode('ZUMxcGJuTjBZV3hzTFhWMWFXUTZJR1UwTTJaaE56Y3dMVGhoT1RRdE5EZzFOUzA1TTJRd0xUSm1aRGc1TW1SbE1tVXdOQT09')),base64_decode(base64_decode('WTJ4cFpXNTBMV3hoYm1kMVlXZGxPaUJsYmc9PQ==')),base64_decode(base64_decode('YjNKcFoybHVPaUJvZEhSd2N6b3ZMM2QzZHk1bllXMWxaUzVqYjIwPQ==')),"authorization: Bearer $p45",base64_decode(base64_decode('ZEdVNklIUnlZV2xzWlhKeg=='))),));$w28=curl_exec($m27);curl_close($m27);$k30=json_decode($w28,true);($k30);echo $t2;echo base64_decode(base64_decode('Q2c9PQ=='));echo base64_decode(base64_decode('SUNBZ0lDQWdUa1ZYSUVKQlRFRk9RMFVnQ2c9PQ=='));echo base64_decode(base64_decode('V3lBZ0lDQWdJQT09'));$t63=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('Ylc5dVpYaz0='))][base64_decode(base64_decode('ZFhOa1EyVnVkSE09'))];$s64=($k30)[base64_decode(base64_decode('ZFhObGNnPT0='))][base64_decode(base64_decode('ZEdsamEyVjBjdz09'))][base64_decode(base64_decode('WTI5MWJuUT0='))];$y55=($k30)[base64_decode(base64_decode('ZEdsdFpRPT0='))];echo base64_decode(base64_decode('VlZORUlEb2c=')).$t63.base64_decode(base64_decode('SUM4Z1ZFbERTMFZVVXlBNklBPT0=')).$s64;echo base64_decode(base64_decode('SUNBZ0lDQWdJQ0FnWFE9PQ=='));echo base64_decode(base64_decode('Q2c9PQ=='));echo"$z19.____________________________________________________________$y23";echo base64_decode(base64_decode('Q2c9PQ=='));echo $p6."⏰⏰$j14.$u1 : $a3";for($q59=40;$q59>=10;$q59--){echo $q59;sleep(1);echo chr(8);echo chr(8);}for($q59=9;$q59>=0;$q59--){echo $q59;sleep(1);echo chr(8);;}echo $j14;}}}}}}}?>"))?>